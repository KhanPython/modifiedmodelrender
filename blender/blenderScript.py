import bpy
from pathlib import Path
import math
import argparse, sys

# Replacing dashes with underscores for valid Python argument names
parser = argparse.ArgumentParser()
parser.add_argument("--input")
parser.add_argument("--output")
params = vars(parser.parse_args(sys.argv[sys.argv.index("--") + 1 :]))


def centerObjectOriginToGeometry(obj):
    # To undo this later, the cursor must be aligned with the location of the object.
    bpy.context.scene.cursor.location = obj.location
    # Align the object's origin with the object's center.
    bpy.ops.object.origin_set(type="ORIGIN_GEOMETRY")

def render(x: Path):
    # Updated the import function to the new API call
    bpy.ops.wm.obj_import(filepath=str(x))
    
    modelName = x.stem
    obj = bpy.data.objects[modelName]
    assert obj
    
    centerObjectOriginToGeometry(obj)
    obj.location = (0, 0, 0)
    # TODO: This is empirical, may only work for me. Depends on orientation when exporting...
    obj.rotation_euler.z = -math.pi
    
    # Zoom out a bit, so we aren't touching the edges of the view.
    # We need blank film to apply an outline to the model.
    obj.select_set(True)
    bpy.ops.view3d.camera_to_view_selected()
    camera = bpy.context.scene.camera
    camera.data.ortho_scale *= 1.04
    
    bpy.context.scene.render.filepath = params["output"]
    bpy.ops.render.render(animation=False, write_still=True)
    
    #! Save an autogenerated .blend file for debugging purposes.
    output_blend_file_path = f"./blenderSave/{modelName}.blend"  
    bpy.ops.wm.save_as_mainfile(filepath=output_blend_file_path)
    bpy.ops.object.delete()

render(Path(params["input"]))
